{"ast":null,"code":"var _jsxFileName = \"/Users/kylechart/Desktop/Websites/robo-friends/src/Cardlist.js\";\nimport React from 'react';\nimport Card from './Card'; // Each robot can be done one by one, grabbing each index item - <Card id={robots[0].id} name={robots[0].name} email={robots[0].email} />. Or you can do it in a more efficent map loop \n\nconst Cardlist = ({\n  robots\n}) => {\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 3\n    }\n  }, robots.map((user, i) => {\n    return /*#__PURE__*/React.createElement(Card, {\n      key: i,\n      id: robots[i].id,\n      name: robots[i].name,\n      email: robots[i].email,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 13\n      }\n    });\n  }));\n};\n\nexport default Cardlist; //With react, and doing something like this, you will have to assign it a key! This is because otherwise the virtual DOM wont remember what it is\n// if it gets deleted, and will delete everything.. By assiging the key, it will remember each indivudual component as a seperate name.\n//Because of the way React works, anything that is placed inside of {} is native javascript, even if it uses different syntax which allows you to even\n// Put Javascript inside of the jsx brackets () like in the above code.\n// As i am returning everything on one line in the above code, I do not need to wrap what is being returned inside of () - Only done for returning multiple lined code.\n//The above code allows you to add as many users (robots) as you want, as the loop will continue going until there is no more robots for it to find.","map":{"version":3,"sources":["/Users/kylechart/Desktop/Websites/robo-friends/src/Cardlist.js"],"names":["React","Card","Cardlist","robots","map","user","i","id","name","email"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,QAAjB,C,CAEA;;AAEA,MAAMC,QAAQ,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAgB;AAChC,sBACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEEA,MAAM,CAACC,GAAP,CAAW,CAACC,IAAD,EAAOC,CAAP,KAAa;AACvB,wBAAO,oBAAC,IAAD;AAAM,MAAA,GAAG,EAAEA,CAAX;AAAc,MAAA,EAAE,EAAEH,MAAM,CAACG,CAAD,CAAN,CAAUC,EAA5B;AAAgC,MAAA,IAAI,EAAEJ,MAAM,CAACG,CAAD,CAAN,CAAUE,IAAhD;AAAsD,MAAA,KAAK,EAAEL,MAAM,CAACG,CAAD,CAAN,CAAUG,KAAvE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACA,GAFD,CAFF,CADD;AASA,CAVD;;AAYA,eAAeP,QAAf,C,CAEA;AACA;AAEA;AACA;AAEA;AAEA","sourcesContent":["import React from 'react';\nimport Card from './Card';\n\n// Each robot can be done one by one, grabbing each index item - <Card id={robots[0].id} name={robots[0].name} email={robots[0].email} />. Or you can do it in a more efficent map loop \n\nconst Cardlist = ({ robots }) => {\n\treturn (\n\t\t<div>\n\t\t\t{\n\t\t\t\trobots.map((user, i) => {\n\t\t\t\t\treturn <Card key={i} id={robots[i].id} name={robots[i].name} email={robots[i].email} />\n\t\t\t\t})\n\t\t\t}\n\t    </div>\n\t);\n}\n\nexport default Cardlist;\n\n//With react, and doing something like this, you will have to assign it a key! This is because otherwise the virtual DOM wont remember what it is\n// if it gets deleted, and will delete everything.. By assiging the key, it will remember each indivudual component as a seperate name.\n\n//Because of the way React works, anything that is placed inside of {} is native javascript, even if it uses different syntax which allows you to even\n// Put Javascript inside of the jsx brackets () like in the above code.\n\n// As i am returning everything on one line in the above code, I do not need to wrap what is being returned inside of () - Only done for returning multiple lined code.\n\n//The above code allows you to add as many users (robots) as you want, as the loop will continue going until there is no more robots for it to find."]},"metadata":{},"sourceType":"module"}