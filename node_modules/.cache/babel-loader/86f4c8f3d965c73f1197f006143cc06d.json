{"ast":null,"code":"import React from'react';import Card from'./Card';// Each robot can be done one by one, grabbing each index item - <Card id={robots[0].id} name={robots[0].name} email={robots[0].email} />. Or you can do it in a more efficent map loop \nvar Cardlist=function Cardlist(_ref){var robots=_ref.robots;return/*#__PURE__*/React.createElement(\"div\",null,robots.map(function(user,i){return/*#__PURE__*/React.createElement(Card,{key:i,id:robots[i].id,name:robots[i].name,email:robots[i].email});}));};export default Cardlist;//With react, and doing something like this, you will have to assign it a key! This is because otherwise the virtual DOM wont remember what it is\n// if it gets deleted, and will delete everything.. By assiging the key, it will remember each indivudual component as a seperate name.\n//Because of the way React works, anything that is placed inside of {} is native javascript, even if it uses different syntax which allows you to even\n// Put Javascript inside of the jsx brackets () like in the above code.\n// As i am returning everything on one line in the above code, I do not need to wrap what is being returned inside of () - Only done for returning multiple lined code.\n//The above code allows you to add as many users (robots) as you want, as the loop will continue going until there is no more robots for it to find.","map":{"version":3,"sources":["/Users/kylechart/Desktop/Programming/ZTMWD-RoboFriends/src/Cardlist.js"],"names":["React","Card","Cardlist","robots","map","user","i","id","name","email"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,MAAOC,CAAAA,IAAP,KAAiB,QAAjB,CAEA;AAEA,GAAMC,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,MAAgB,IAAbC,CAAAA,MAAa,MAAbA,MAAa,CAChC,mBACC,+BAEEA,MAAM,CAACC,GAAP,CAAW,SAACC,IAAD,CAAOC,CAAP,CAAa,CACvB,mBAAO,oBAAC,IAAD,EAAM,GAAG,CAAEA,CAAX,CAAc,EAAE,CAAEH,MAAM,CAACG,CAAD,CAAN,CAAUC,EAA5B,CAAgC,IAAI,CAAEJ,MAAM,CAACG,CAAD,CAAN,CAAUE,IAAhD,CAAsD,KAAK,CAAEL,MAAM,CAACG,CAAD,CAAN,CAAUG,KAAvE,EAAP,CACA,CAFD,CAFF,CADD,CASA,CAVD,CAYA,cAAeP,CAAAA,QAAf,CAEA;AACA;AAEA;AACA;AAEA;AAEA","sourcesContent":["import React from 'react';\nimport Card from './Card';\n\n// Each robot can be done one by one, grabbing each index item - <Card id={robots[0].id} name={robots[0].name} email={robots[0].email} />. Or you can do it in a more efficent map loop \n\nconst Cardlist = ({ robots }) => {\n\treturn (\n\t\t<div>\n\t\t\t{\n\t\t\t\trobots.map((user, i) => {\n\t\t\t\t\treturn <Card key={i} id={robots[i].id} name={robots[i].name} email={robots[i].email} />\n\t\t\t\t})\n\t\t\t}\n\t    </div>\n\t);\n}\n\nexport default Cardlist;\n\n//With react, and doing something like this, you will have to assign it a key! This is because otherwise the virtual DOM wont remember what it is\n// if it gets deleted, and will delete everything.. By assiging the key, it will remember each indivudual component as a seperate name.\n\n//Because of the way React works, anything that is placed inside of {} is native javascript, even if it uses different syntax which allows you to even\n// Put Javascript inside of the jsx brackets () like in the above code.\n\n// As i am returning everything on one line in the above code, I do not need to wrap what is being returned inside of () - Only done for returning multiple lined code.\n\n//The above code allows you to add as many users (robots) as you want, as the loop will continue going until there is no more robots for it to find."]},"metadata":{},"sourceType":"module"}